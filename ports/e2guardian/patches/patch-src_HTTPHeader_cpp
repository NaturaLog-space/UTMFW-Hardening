$OpenBSD$
Index: src/HTTPHeader.cpp
--- src/HTTPHeader.cpp.orig
+++ src/HTTPHeader.cpp
@@ -1103,10 +1103,13 @@ if(!icap) {
 
 String HTTPHeader::getLogUrl(bool withport, bool isssl)
 {
-
     String answer = getUrl(withport, isssl);
     if (mitm || isssl) {
-        answer = "https://" + answer.after("://");
+        if (answer.contains("://")) {
+            answer = "https://" + answer.after("://");
+        } else {
+            answer = "https://" + answer;
+        }
     }
     return answer;
 }
@@ -1140,6 +1143,14 @@ String HTTPHeader::getUrl(bool withport, bool isssl)
     } else {
         answer = answer.before(" http/"); // just in case!
     }
+    if (isssl) {
+        https = true;
+        if (answer.startsWith("http://")) {
+            answer = "https://" + answer.after("http://");
+        } else if (!answer.startsWith("https://")) {
+            answer = "https://" + answer;
+        }
+    }
     if (requestType() == "CONNECT") {
         https = true;
         port = 443;
@@ -1174,11 +1185,20 @@ String HTTPHeader::getUrl(bool withport, bool isssl)
             // Squid doesn't like requests in this format. Work around the fact.
             header.front() = requestType() + " " + answer + " HTTP/" + header.front().after(" HTTP/");
         } else { // must be in the form GET http://foo.bar:80/ HTML/1.0
-            if (!answer.after("://").contains("/")) {
-                answer += "/"; // needed later on so correct host is extracted
-            }
             String protocol(answer.before("://"));
-            hostname = answer.after("://");
+            if (answer.contains("://")) {
+                hostname = answer.after("://");
+                if (!answer.after("://").contains("/")) {
+                    answer += "/"; // needed later on so correct host is extracted
+                }
+            } else {
+                protocol = "https";
+                hostname = answer;
+                if (!answer.contains("/")) {
+                    answer += "/"; // needed later on so correct host is extracted
+                }
+            }
+
             String url(hostname.after("/"));
             url.removeWhiteSpace(); // remove rubbish like ^M and blanks
             if (hostname.endsWith(".")) {
@@ -1278,7 +1298,10 @@ String HTTPHeader::getCookie(const char *cookie)
         if (i->startsWithLower("cookie:")) {
             line = i->after(": ");
             if (line.contains(cookie)) { // We know we have the cookie
-                line = line.after(cookie);
+                // There may be multiple cookies, use the last one
+                while (line.contains(cookie)) {
+                    line = line.after(cookie);
+                }
                 line.lop(); // Get rid of the '='
                 if (line.contains(";")) {
                     line = line.before(";");
@@ -1370,6 +1393,44 @@ String HTTPHeader::getReferer()
     std::cerr << thread_id << "Found Referer URL:" << line << " Line: " << __LINE__ << " Function: " << __func__ << std::endl;
 #endif
     return line;
+}
+
+bool HTTPHeader::parseSSLproxyLine(String &sslproxy_ip, String &sslproxy_port, String &sslproxy_client_ip, String &sslproxy_client_port, String &sslproxy_ssl, String &sslproxy_user)
+{
+    for (std::deque<String>::iterator i = header.begin(); i != header.end(); i++) {
+        // SSLproxy: [127.0.0.1]:34649,[192.168.3.24]:47286,[74.125.206.108]:465,s[,soner]
+        if (i->startsWith("SSLproxy:")) {
+#ifdef DGDEBUG
+            std::cout << "Found SSLproxy header: " << i->toCharArray() << std::endl;
+#endif
+            String line = i->after("SSLproxy: [");
+            line.removeWhiteSpace();
+
+			String sslproxy_ipport = line.before(",");
+			sslproxy_ip = sslproxy_ipport.before("]");
+			sslproxy_port = sslproxy_ipport.after("]:");
+			
+			String sslproxy_client_ipport = line.after(",[").before(",");
+			sslproxy_client_ip = sslproxy_client_ipport.before("]");
+			sslproxy_client_port = sslproxy_client_ipport.after("]:");
+
+			sslproxy_ssl = line.after(",[").after(",[").after(",");
+			if (sslproxy_ssl.length() > 1) {
+				sslproxy_user = sslproxy_ssl.after(",");
+				sslproxy_ssl = sslproxy_ssl.before(",");
+			} 
+#ifdef DGDEBUG
+            std::cout << "sslproxy_ip: " << sslproxy_ip << std::endl;
+            std::cout << "sslproxy_port: " << sslproxy_port << std::endl;
+            std::cout << "sslproxy_client_ip: " << sslproxy_client_ip << std::endl;
+            std::cout << "sslproxy_client_port: " << sslproxy_client_port << std::endl;
+            std::cout << "sslproxy_ssl: " << sslproxy_ssl << std::endl;
+            std::cout << "sslproxy_user: " << sslproxy_user << std::endl;
+#endif
+            return true;
+        }
+    }
+    return false;
 }
 
 // *
